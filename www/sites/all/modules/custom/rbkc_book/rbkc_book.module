<?php

/**
 * @file
 * Drupal hooks for RBKC book module.
 *
 * The module exists solely to change the default behaviour of the core book
 * module which only returns published nodes to be selected as parent book
 * pages.
 *
 * All the functions in this module, beyond the first few, exist so that we can
 * get to the code in menu_tree_check_access() and return nodes regardless of
 * node->status.
 */

/**
 * Implements hook_menu_alter().
 */
function rbkc_book_menu_alter(&$items) {
  $items['admin/content/book']['page callback'] = 'rbkc_book_admin_overview';
  unset($items['admin/content/book']['file']);

  $items['admin/content/book/%node']['page arguments'] = array('rbkc_book_admin_edit', 3);
  unset($items['admin/content/book/%node']['file']);
}

/**
 * Returns an administrative overview of all books.
 *
 * @return string
 *   A HTML-formatted string with the administrative page content.
 *
 * @see book_menu()
 */
function rbkc_book_admin_overview() {
  $rows = array();

  $headers = array(t('Book'), t('Operations'));

  // Add any recognized books to the table list.
  foreach (rbkc_book_get_books() as $book) {
    $rows[] = array(l($book['title'], $book['href'], $book['options']), l(t('edit order and titles'), 'admin/content/book/' . $book['nid']));
  }

  return theme('table', array('header' => $headers, 'rows' => $rows, 'empty' => t('No books available.')));
}

/**
 * Form constructor for administering a single book's hierarchy.
 *
 * @see book_admin_edit_submit()
 *
 * @param $node
 *   The node of the top-level page in the book.
 *
 * @see book_admin_edit_validate()
 * @see book_admin_edit_submit()
 * @ingroup forms
 */
function rbkc_book_admin_edit($form, $form_state, $node) {
  drupal_set_title($node->title);
  $form['actions']['add_guide_page'] = array(
    '#markup' => '<p> + ' . l(t('Add a new guide page'), 'node/add/guide') . '</p>',
  );
  $form['actions']['add_publication_page'] = array(
    '#markup' => '<p>  + ' . l(t('Add a new publication page'), 'node/add/publication') . '</p>',
  );
  $form['#node'] = $node;
  _rbkc_book_admin_table($node, $form);
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save book pages'),
  );

  return $form;
}

/**
 * Form validation handler for book_admin_edit().
 *
 * Checks that the book has not been changed while using the form.
 *
 * @see book_admin_edit_submit()
 */
function rbkc_book_admin_edit_validate($form, &$form_state) {
  module_load_include('inc', 'book', 'book.admin');
  book_admin_edit_validate($form, $form_state);
}

/**
 * Form submission handler for book_admin_edit().
 *
 * This function takes care to save parent menu items before their children.
 * Saving menu items in the incorrect order can break the menu tree.
 *
 * @see book_admin_edit_validate()
 * @see menu_overview_form_submit()
 */
function rbkc_book_admin_edit_submit($form, &$form_state) {
  module_load_include('inc', 'book', 'book.admin');
  book_admin_edit_submit($form, $form_state);
}

/**
 * Builds the table portion of the form for the book administration page.
 *
 * @param $node
 *   The node of the top-level page in the book.
 * @param $form
 *   The form that is being modified, passed by reference.
 *
 * @see book_admin_edit()
 */
function _rbkc_book_admin_table($node, &$form) {
  $form['table'] = array(
    '#theme' => 'book_admin_table',
    '#tree' => TRUE,
  );

  $tree = rbkc_book_menu_subtree_data($node->book);
  $tree = array_shift($tree); // Do not include the book item itself.
  if ($tree['below']) {
    $hash = drupal_hash_base64(serialize($tree['below']));
    // Store the hash value as a hidden form element so that we can detect
    // if another user changed the book hierarchy.
    $form['tree_hash'] = array(
      '#type' => 'hidden',
      '#default_value' => $hash,
    );
    $form['tree_current_hash'] = array(
      '#type' => 'value',
      '#value' => $hash,
    );
    module_load_include('inc', 'book', 'book.admin');
    _book_admin_table_tree($tree['below'], $form['table']);
  }
}

/**
 * Gets the data representing a subtree of the book hierarchy.
 *
 * The root of the subtree will be the link passed as a parameter, so the
 * returned tree will contain this item and all its descendents in the menu
 * tree.
 *
 * @param $link
 *   A fully loaded menu link.
 *
 * @return
 *   A subtree of menu links in an array, in the order they should be rendered.
 */
function rbkc_book_menu_subtree_data($link) {
  $tree = &drupal_static(__FUNCTION__, array());

  // Generate a cache ID (cid) specific for this $menu_name and $link.
  $cid = 'links:' . $link['menu_name'] . ':subtree-cid:' . $link['mlid'];

  if (!isset($tree[$cid])) {
    $cache = cache_get($cid, 'cache_menu');

    if ($cache && isset($cache->data)) {
      // If the cache entry exists, it will just be the cid for the actual data.
      // This avoids duplication of large amounts of data.
      $cache = cache_get($cache->data, 'cache_menu');

      if ($cache && isset($cache->data)) {
        $data = $cache->data;
      }
    }

    // If the subtree data was not in the cache, $data will be NULL.
    if (!isset($data)) {
      $query = db_select('menu_links', 'ml', array('fetch' => PDO::FETCH_ASSOC));
      $query->join('menu_router', 'm', 'm.path = ml.router_path');
      $query->join('book', 'b', 'ml.mlid = b.mlid');
      $query->fields('b');
      $query->fields('m', array('load_functions', 'to_arg_functions', 'access_callback', 'access_arguments', 'page_callback', 'page_arguments', 'delivery_callback', 'title', 'title_callback', 'title_arguments', 'type'));
      $query->fields('ml');
      $query->condition('menu_name', $link['menu_name']);
      for ($i = 1; $i <= MENU_MAX_DEPTH && $link["p$i"]; ++$i) {
        $query->condition("p$i", $link["p$i"]);
      }
      for ($i = 1; $i <= MENU_MAX_DEPTH; ++$i) {
        $query->orderBy("p$i");
      }
      $links = array();
      foreach ($query->execute() as $item) {
        $links[] = $item;
      }
      $data['tree'] = menu_tree_data($links, array(), $link['depth']);
      $data['node_links'] = array();
      menu_tree_collect_node_links($data['tree'], $data['node_links']);
      // Compute the real cid for book subtree data.
      $tree_cid = 'links:' . $item['menu_name'] . ':subtree-data:' . hash('sha256', serialize($data));
      // Cache the data, if it is not already in the cache.

      if (!cache_get($tree_cid, 'cache_menu')) {
        cache_set($tree_cid, $data, 'cache_menu');
      }
      // Cache the cid of the (shared) data using the menu and item-specific cid.
      cache_set($cid, $tree_cid, 'cache_menu');
    }
    // Check access for the current user to each item in the tree.
    rbkc_menu_tree_check_access($data['tree'], $data['node_links']);
    $tree[$cid] = $data['tree'];
  }

  return $tree[$cid];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function rbkc_book_form_node_form_alter(&$form, &$form_state, $form_id) {
  rbkc_book_override_bid_options($form, $form_state, $form_id);
  rbkc_book_override_plid_options($form, $form_state, $form_id);
}

/**
 * Override the bid options on the node edit form.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function rbkc_book_override_bid_options(&$form, &$form_state, $form_id) {
  if (isset($form['book']['bid']) && is_array($form['book']['bid'])) {
    $node = $form['#node'];

    $options = array();
    $nid = isset($node->nid) ? $node->nid : 'new';

    if (isset($node->nid) && ($nid == $node->book['original_bid']) && ($node->book['parent_depth_limit'] == 0)) {
      // This is the top level node in a maximum depth book and thus cannot be moved.
      $options[$node->nid] = $node->title;
    }
    else {
      // The entry point for pull back nodes regardless of status.
      foreach (rbkc_book_get_books() as $book) {
        $options[$book['nid']] = $book['title'];
      }
    }

    if (user_access('create new books') && ($nid == 'new' || ($nid != $node->book['original_bid']))) {
      // The node can become a new book, if it is not one already.
      $options = array($nid => '<' . t('create a new book') . '>') + $options;
    }
    if (!$node->book['mlid']) {
      // The node is not currently in the hierarchy.
      $options = array(0 => '<' . t('none') . '>') + $options;
    }

    $form['book']['bid']['#options'] = $options;
  }
}

/**
 * Override the plid options on the node edit form.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function rbkc_book_override_plid_options(&$form, &$form_state, $form_id) {
  if (isset($form['book']['plid']) && is_array($form['book']['plid']) && isset($form['book']['plid']['#options'])) {
    $node = $form['#node'];
    $form['book']['plid']['#options'] = rbkc_book_toc($node->book['bid'], $node->book['parent_depth_limit'], array($node->book['mlid']));
  }
}

/**
 * Overrides book_get_books().
 *
 * Override the default query that gets books so that we can return unpublished
 * nodes (default behaviour is to return just unpublished nodes).
 *
 * @return array
 */
function rbkc_book_get_books() {
  $all_books = &drupal_static(__FUNCTION__);

  if (!isset($all_books)) {
    $all_books = array();
    $nids = db_query("SELECT DISTINCT(bid) FROM {book}")->fetchCol();

    if ($nids) {
      $query = db_select('book', 'b', array('fetch' => PDO::FETCH_ASSOC));
      $query->join('node', 'n', 'b.nid = n.nid');
      $query->join('menu_links', 'ml', 'b.mlid = ml.mlid');
      $query->addField('n', 'type', 'type');
      $query->addField('n', 'title', 'title');
      $query->fields('b');
      $query->fields('ml');
      $query->condition('n.nid', $nids, 'IN');
      // The following comment line is responsible for the default behaviour
      // whereby only published nodes are available as parent book pages.
//      $query->condition('n.status', 1);
      $query->orderBy('ml.weight');
      $query->orderBy('ml.link_title');
      $query->addTag('node_access');
      $result2 = $query->execute();
      foreach ($result2 as $link) {
        $link['href'] = $link['link_path'];
        $link['options'] = unserialize($link['options']);
        $all_books[$link['bid']] = $link;
      }
    }
  }

  return $all_books;
}

/**
 * Override book_toc().
 *
 * @param $bid
 * @param $depth_limit
 * @param array $exclude
 * @return array
 */
function rbkc_book_toc($bid, $depth_limit, $exclude = array()) {
  $tree = rbkc_menu_tree_all_data(book_menu_name($bid));
  $toc = array();
  _book_toc_recurse($tree, '', $toc, $exclude, $depth_limit);

  return $toc;
}

/**
 * Override menu_tree_all_data().
 *
 * @param $menu_name
 * @param null $link
 * @param null $max_depth
 * @return mixed
 */
function rbkc_menu_tree_all_data($menu_name, $link = NULL, $max_depth = NULL) {
  $tree = &drupal_static(__FUNCTION__, array());

  // Use $mlid as a flag for whether the data being loaded is for the whole tree.
  $mlid = isset($link['mlid']) ? $link['mlid'] : 0;
  // Generate a cache ID (cid) specific for this $menu_name, $link, $language, and depth.
  $cid = 'links:' . $menu_name . ':all:' . $mlid . ':' . $GLOBALS['language']->language . ':' . (int) $max_depth;

  if (!isset($tree[$cid])) {
    // If the static variable doesn't have the data, check {cache_menu}.
    $cache = cache_get($cid, 'cache_menu');
    if ($cache && isset($cache->data)) {
      // If the cache entry exists, it contains the parameters for
      // menu_build_tree().
      $tree_parameters = $cache->data;
    }
    // If the tree data was not in the cache, build $tree_parameters.
    if (!isset($tree_parameters)) {
      $tree_parameters = array(
        'min_depth' => 1,
        'max_depth' => $max_depth,
      );
      if ($mlid) {
        // The tree is for a single item, so we need to match the values in its
        // p columns and 0 (the top level) with the plid values of other links.
        $parents = array(0);
        for ($i = 1; $i < MENU_MAX_DEPTH; $i++) {
          if (!empty($link["p$i"])) {
            $parents[] = $link["p$i"];
          }
        }
        $tree_parameters['expanded'] = $parents;
        $tree_parameters['active_trail'] = $parents;
        $tree_parameters['active_trail'][] = $mlid;
      }

      // Cache the tree building parameters using the page-specific cid.
      cache_set($cid, $tree_parameters, 'cache_menu');
    }

    // Build the tree using the parameters; the resulting tree will be cached
    // by _menu_build_tree()).
    $tree[$cid] = rbkc_menu_build_tree($menu_name, $tree_parameters);
  }

  return $tree[$cid];
}

/**
 * Override menu_build_tree().
 *
 * @param $menu_name
 * @param array $parameters
 * @return mixed
 */
function rbkc_menu_build_tree($menu_name, array $parameters = array()) {
  // Build the menu tree.
  $data = _menu_build_tree($menu_name, $parameters);
  // Check access for the current user to each item in the tree.
  rbkc_menu_tree_check_access($data['tree'], $data['node_links']);
  return $data['tree'];
}

/**
 * Override menu_tree_check_access().
 *
 * @param $tree
 * @param array $node_links
 */
function rbkc_menu_tree_check_access(&$tree, $node_links = array()) {
  if ($node_links) {
    $nids = array_keys($node_links);
    $select = db_select('node', 'n');
    $select->addField('n', 'nid');
    // The following commented line is responsible for the default behaviour
    // which is to return links for published nodes, commenting it out so that
    // nodes regardless of node->status appear as potential parents as you're
    // creating new book pages.
//    $select->condition('n.status', 1);
    $select->condition('n.nid', $nids, 'IN');
    $select->addTag('node_access');
    $nids = $select->execute()->fetchCol();
    foreach ($nids as $nid) {
      foreach ($node_links[$nid] as $mlid => $link) {
        $node_links[$nid][$mlid]['access'] = TRUE;
      }
    }
  }

  // Change link title_callback to t. This prevents node_page_title() getting
  // called with the nid being passed as a node object (which causes a notice).
  foreach (array_keys($tree) as $key) {
    $tree[$key]['link']['title_callback'] = 't';
    unset($tree[$key]['link']['title_arguments']);
  }

  _menu_tree_check_access($tree);
}

/**
 * Formats the menu links for the child pages of the current page.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   HTML for the links to the child pages of the current page.
 */
function rbkc_book_children($book_link) {
  $flat = rbkc_book_get_flat_menu($book_link);

  $children = array();

  if ($book_link['has_children']) {
    // Walk through the array until we find the current page.
    do {
      $link = array_shift($flat);
    }
    while ($link && ($link['mlid'] != $book_link['mlid']));
    // Continue though the array and collect the links whose parent is this page.
    while (($link = array_shift($flat)) && $link['plid'] == $book_link['mlid']) {
      $data['link'] = $link;
      $data['below'] = '';
      $children[] = $data;
    }
  }

  if ($children) {
    $elements = menu_tree_output($children);
    return drupal_render($elements);
  }
  return '';
}

/**
 * Gets the book menu tree for a page and returns it as a linear array.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   A linear array of menu links in the order that the links are shown in the
 *   menu, so the previous and next pages are the elements before and after the
 *   element corresponding to the current node. The children of the current node
 *   (if any) will come immediately after it in the array, and links will only
 *   be fetched as deep as one level deeper than $book_link.
 */
function rbkc_book_get_flat_menu($book_link) {
  $flat = &drupal_static(__FUNCTION__, array());

  if (!isset($flat[$book_link['mlid']])) {
    // Call menu_tree_all_data() to take advantage of the menu system's caching.
    $tree = rbkc_menu_tree_all_data($book_link['menu_name'], $book_link, $book_link['depth'] + 1);
    $flat[$book_link['mlid']] = array();
    _book_flatten_menu($tree, $flat[$book_link['mlid']]);
  }

  return $flat[$book_link['mlid']];
}

/**
 * Fetches the menu link for the previous page of the book.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   A fully loaded menu link for the page before the one represented in
 *   $book_link.
 */
function rbkc_book_prev($book_link) {
  // If the parent is zero, we are at the start of a book.
  if ($book_link['plid'] == 0) {
    return NULL;
  }
  $flat = rbkc_book_get_flat_menu($book_link);
  // Assigning the array to $flat resets the array pointer for use with each().
  $curr = NULL;
  do {
    $prev = $curr;
    list($key, $curr) = each($flat);
  } while ($key && $key != $book_link['mlid']);

  if ($key == $book_link['mlid']) {
    // The previous page in the book may be a child of the previous visible link.
    if ($prev['depth'] == $book_link['depth'] && $prev['has_children']) {
      // The subtree will have only one link at the top level - get its data.
      $tree = rbkc_book_menu_subtree_data($prev);
      $data = array_shift($tree);
      // The link of interest is the last child - iterate to find the deepest one.
      while ($data['below']) {
        $data = end($data['below']);
      }

      return $data['link'];
    }
    else {
      return $prev;
    }
  }
}

/**
 * Fetches the menu link for the next page of the book.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   A fully loaded menu link for the page after the one represented in
 *   $book_link.
 */
function rbkc_book_next($book_link) {
  $flat = rbkc_book_get_flat_menu($book_link);
  // Assigning the array to $flat resets the array pointer for use with each().
  do {
    list($key, $curr) = each($flat);
  }
  while ($key && $key != $book_link['mlid']);

  if ($key == $book_link['mlid']) {
    return current($flat);
  }
}