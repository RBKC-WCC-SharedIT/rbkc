<?php

/**
 * @file
 * Drupal hooks.
 */

/**
 * Implements hook_block_info().
 *
 * Provides a block that divides up the menu links in drop-down-service-menu
 * into three separate unordered lists.
 */
function rbkc_navigation_block_info() {
  $blocks['drop-down-service-menu']['info'] = t('RBKC drop down service menu');
  $blocks['drop-down-service-menu']['cache'] = DRUPAL_CACHE_GLOBAL;

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rbkc_navigation_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'drop-down-service-menu':
      $block['subject'] = '<none>';

      $split_into = 3;
      $menu_links = menu_navigation_links('drop-down-service-menu');
      $split_menus = rbkc_navigation_split_menu($menu_links, $split_into);

      $output = '';
      foreach ($split_menus as $menu) {
        $output .= theme('links', array('links' => $menu));
      }

      $block['content'] = $output;
      break;
  }

  return $block;
}

/**
 * Given an array of menu links, split the array into $split_count equal chunks.
 *
 * @param array $menu_links
 * @param $split_count
 *
 * @return array
 *  An array with $split_count keys contains menu links.
 */
function rbkc_navigation_split_menu(array $menu_links, $split_count) {
  $menu_link_count = count($menu_links);
  $links_per_split = ceil($menu_link_count / $split_count);
  return array_chunk($menu_links, $links_per_split);
}

/**
 * Implements hook_preprocess_node().
 *
 * Override node variables.
 */
function rbkc_navigation_preprocess_node(&$variables) {
  switch ($variables['type']) {
    case 'publication':
    case 'guide':
      $variables['content']['book_menu'] = _rbkc_navigation_book_menu($variables['node']);
      break;
  }
}

/**
 * Generate a table of contents menu for a book (including the parent page).
 *
 * book_block_view() in 'only show book menu when on a book' mode does not
 * include a parent page menu link.
 *
 * This function is loosely based on the book_block_view() function and
 * generates a menu tree with the parent and child menu items for the book all
 * at the same level.
 *
 * @see book_block_view().
 */
function _rbkc_navigation_book_menu(stdClass $node) {
  $content = array();

  if (empty($node->book['bid'])) {
    return $content;
  }

  // Access check.
  $select = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.nid', $node->book['bid'])
    ->addTag('node_access');

  $title = $select->execute()->fetchField();

  // Only show the block if the user has view access for the top-level node.
  if (!$title) {
    return $content;
  }

  // Obtain the menu tree data for the book.
  $menu_tree = rbkc_menu_tree_all_data($node->book['menu_name'], $node->book);

  // Bring the 'below' menu links up.
  $menu_tree = _rbkc_navigation_level_up_menu_links($menu_tree);

  // Differentiate between the content types these menus appear on.
  $parent_node = node_load($node->book['bid']);

  // Book uses the bid in the menu name which is not helpful, replace it with
  // something more meaningful that we can catch at the template level.
  $menu_tree = _rbkc_navigation_set_menu_name($menu_tree, $parent_node->type);

  switch ($parent_node->type) {
    case 'guide':
      $menu_tree = rbkc_navigation_split_menu($menu_tree, 2);
      // These menu links are rendered as an ordered list with a start attribute
      // on the second column.
      $content['content']['left'] = menu_tree_output($menu_tree[0]);
      $content['content']['left']['#theme_wrappers'][0] .= '_left';
      if (isset($menu_tree[1])) {
        $start = count($menu_tree[0]) + 1;
        $content['content']['right'] = menu_tree_output($menu_tree[1]);
        $content['content']['right']['#theme_wrappers'][0] .= '_right__' . (string) $start;
      }
      break;

    case 'publication':
      // Get a direct link to a PDF if one is attached to the parent book page.
      $pdf_menu_link = _rbkc_navigation_pdf_menu_link('field_asset', $parent_node);
      $content['content'] = menu_tree_output($menu_tree) + array($pdf_menu_link);
      break;
  }

  return $content;
}

/**
 * Level up below links.
 *
 * Move menu links that are 'below' the top level to the top level.
 *
 * @param array $menu_links
 *
 * @return array
 *    An array of menu links.
 */
function _rbkc_navigation_level_up_menu_links(array $menu_links) {
  $parent_menu_link_key = key($menu_links);

  foreach ($menu_links[$parent_menu_link_key]['below'] as $child_menu_link_key => $child_menu_link_item) {
    $menu_links[$child_menu_link_key] = $child_menu_link_item;
    unset($menu_links[$parent_menu_link_key]['below'][$child_menu_link_key]);
  }

  return $menu_links;
}

/**
 * Generate a menu link to a PDF file on a node (if one exists).
 *
 * @param string $field_name
 * @param \stdClass $node
 *
 * @return array A menu link array or an empty array if no PDF file is found.
 * A menu link array or an empty array if no PDF file is found.
 */
function _rbkc_navigation_pdf_menu_link($field_name, stdClass $node) {
  $menu_link = array();

  if (!isset($node->{$field_name}[LANGUAGE_NONE][0])) {
    return $menu_link;
  }

  if ($file = $node->{$field_name}[LANGUAGE_NONE][0]) {
    $menu_link = array(
      '#href' => file_create_url($file['uri']),
      '#title' => t('Download the guide as a PDF'),
      '#access' => file_download_access($file['uri']),
      '#theme' => 'menu_link',
      '#below' => array(),
      '#localized_options' => array(),
      '#attributes' => array(),
    );
  }

  return $menu_link;
}

/**
 * Replace the menu_name of menu links with book-toc-<node->type> so we can
 * differentiate between menu links on different content type pages.
 *
 * @param array $menu_tree
 * @param $type
 *
 * @return array
 */
function _rbkc_navigation_set_menu_name(array $menu_tree, $type) {
  foreach ($menu_tree as $key => $menu) {
    $menu_tree[$key]['link']['menu_name'] = 'book-toc-' . $type;
  }

  return $menu_tree;
}


/**
 * Processes variables for book-navigation.tpl.php.
 *
 * @param $variables
 *   An associative array containing the following key:
 *   - book_link
 *
 * @see book-navigation.tpl.php
 */
function rbkc_book_preprocess_book_navigation(&$variables) {
  $book_link = $variables['book_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['book_id'] = $book_link['bid'];
  $variables['book_title'] = check_plain($book_link['link_title']);
  $variables['book_url'] = 'node/' . $book_link['bid'];
  $variables['current_depth'] = $book_link['depth'];
  $variables['tree'] = '';

  if ($book_link['mlid']) {
    $variables['tree'] = rbkc_book_children($book_link);

    if ($prev = rbkc_book_prev($book_link)) {
      $prev_href = url($prev['href']);
      drupal_add_html_head_link(array('rel' => 'prev', 'href' => $prev_href));
      $variables['prev_url'] = $prev_href;
      $variables['prev_title'] = check_plain($prev['link_title']);
    }

    if ($book_link['plid'] && $parent = book_link_load($book_link['plid'])) {
      $parent_href = url($parent['href']);
      drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
      $variables['parent_url'] = $parent_href;
      $variables['parent_title'] = check_plain($parent['link_title']);
    }

    if ($next = rbkc_book_next($book_link)) {
      $next_href = url($next['href']);
      drupal_add_html_head_link(array('rel' => 'next', 'href' => $next_href));
      $variables['next_url'] = $next_href;
      $variables['next_title'] = check_plain($next['link_title']);
    }
  }

  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function rbkc_navigation_preprocess_page(&$variables) {
  $node = menu_get_object();

  if (is_null($node)) {
    $link_variables = array();

    switch ($_GET['q']) {
      case 'newsroom':
        $link_variables = array(
          'path' => 'newsroom',
          'text' => t('Newsroom'),
          'options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
        );
        break;
    }

    if (!empty($link_variables)) {
      $variables['service_area_link'] = theme('link', $link_variables);
    }

    return;
  }

  $service_area_node = rbkc_related_content_get_service_area_node($node);

  if (is_null($service_area_node)) {
    if ('press_release' === $node->type) {
      $link_variables = array(
        'path' => 'newsroom',
        'text' => t('Newsroom'),
        'options' => array(
          'attributes' => array(),
          'html' => FALSE,
        ),
      );

      $variables['service_area_link'] = theme('link', $link_variables);
    }
    return;
  }

  $link_variables = array(
    'path' => 'node/' . $service_area_node->nid,
    'text' => $service_area_node->title,
    'options' => array(
      'attributes' => array(),
      'html' => FALSE,
      ),
  );

  $variables['service_area_link'] = theme('link', $link_variables);
}
