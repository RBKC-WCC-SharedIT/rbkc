<?php

/**
 * @file
 * Install, update and uninstall functions for the site.
 */
function rbkc_deploy_install() {
  // Drop down service menu.
  $menu_machine_name = 'drop-down-service-menu';

  $menu = array(
    'menu_name' => $menu_machine_name,
    'title' => st('Drop down service menu'),
    'description' => 'The drop down service menu.',
  );
  menu_save($menu);

  // @todo: Update link path.
  $links = array(
    'Parking, transport and streets',
    'Bins and recycling',
    'Planning',
    'Libraries',
    'Council tax',
    'Births, deaths and marriages',
    'Children and education',
    'Leisure and culture',
    'Parks and ecology',
    'Housing',
    'Jobs',
    'Health and social care',
    'Licensing',
    'Business and enterprise',
    'Environment',
    'Advice and benefits',
    'Community and local life',
    'Newsroom',
  );

  foreach ($links as $link) {
    $item = array(
      'link_title' => st($link),
      'link_path' => '<front>',
      'menu_name' => $menu_machine_name,
    );
    menu_link_save($item);
  }

  // Update the menu router information.
  menu_rebuild();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Service Hub Feature.
 */
function rbkc_deploy_update_7000() {
  module_enable(array('feature_service_hub'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the metatags module.
 */
function rbkc_deploy_update_7001() {
  module_enable(array('metatag'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the node_reference module.
 */
function rbkc_deploy_update_7002() {
  module_enable(array('node_reference'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Create the footer menu and place it in the footerlinks region.
 */
function rbkc_deploy_update_7003() {
  $menu_machine_name = 'menu-footer-links';

  $footer_menu = array(
    'menu_name' => $menu_machine_name,
    'title' => st('Footer links'),
    'description' => 'Footer links.',
  );
  menu_save($footer_menu);

  $links = array(
    'Cookies and your privacy',
    'Contact us',
    'Terms of use',
  );

  // It proved necessary to set a weight to control the order of the menu links.
  $weight = 50;
  foreach ($links as $link) {
    $item = array(
      'link_title' => st($link),
      'link_path' => '<front>',
      'menu_name' => $menu_machine_name,
      'weight' => $weight,
    );
    $weight++;
    menu_link_save($item);
  }

  // Update the menu router information.
  menu_rebuild();

  // Put the menu in the footerlinks block.
  $default_theme = variable_get('theme_default', '');

  if (!$default_theme) {
    return;
  }

  $blocks = array(
    array(
      'module' => 'menu',
      'delta' => $menu_machine_name,
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'footerlinks',
      'pages' => '',
      'cache' => -1,
    ),
  );

  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the topics feature.
 */
function rbkc_deploy_update_7004() {
  module_enable(array('feature_topics'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the workbench_scheduler module.
 */
function rbkc_deploy_update_7005() {
  module_enable(array('workbench_scheduler'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Publication Feature.
 */
function rbkc_deploy_update_7006() {
  module_enable(array('feature_publication', 'feature_common'), TRUE);

  // feature_publication has a dependency on the core book module which when
  // installed creates a book content type, let's delete it.
  node_type_delete('book');

  features_revert();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the RBKC view modes module.
 */
function rbkc_deploy_update_7007() {
  module_enable(array('rbkc_view_modes'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Guide Feature.
 */
function rbkc_deploy_update_7008() {
  module_enable(array('feature_guide'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Change the behaviour of the book menu so that it doesn't show all the books
 * on all the pages.
 */
function rbkc_deploy_update_7009() {
  // In 'all pages' mode, the book module generates a nested menu where the
  // parent page exists in a menu and the child pages are nested menus,
  // changing the mode to 'book pages' causes book module to generate a menu of
  // just the child links.
  variable_set('book_block_mode', 'book pages');
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Sub-Hub feature.
 */
function rbkc_deploy_update_7010() {
  module_enable(array('feature_service_sub_hub'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Remove the site_section field.
 */
function rbkc_deploy_update_7011() {
  $instance = field_info_instance('node', 'field_site_section', 'answer');
  field_delete_instance($instance, TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Rename site_sections vocabulary to service_hub.
 *
 * Retrospectively added the check and skip if the service hub vocabulary
 * already exists to prevent integrity constraint violations.
 *
 * @see rbkc_deploy_update_7014().
 */
function rbkc_deploy_update_7012() {
  $service_hub_machine_name = 'service_hub';
  $vocabularies = taxonomy_vocabulary_get_names();

  if (array_key_exists($service_hub_machine_name, $vocabularies)) {
    return t('Skipping ' . __FUNCTION__ . ' as it does not need to be run.');
  }

  db_update('taxonomy_vocabulary')
    ->fields(array('name' => t('Service Hub'), 'machine_name' => 'service_hub', 'description' => 'Service Hub.'))
    ->condition('machine_name', 'site_sections')
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Remove date fields from Answer content type.
 */
function rbkc_deploy_update_7013() {
  // Remove the date fields from Answer content type.
  $field_names = array(
    'field_publish_date',
    'field_expiry_date',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'answer');
    field_delete_instance($instance, TRUE);
  }
}

/**
 * Implements hook_update_N().
 *
 * In some cases, at this point, there will two vocabularies, site sections AND
 * service hub with the terms still against the site section vocabulary. This
 * hook_update_N() checks for that scenario and sorts it out by moving the
 * terms to the service hub vocabulary and deleting the site sections vocabulary.
 */
function rbkc_deploy_update_7014() {
  $site_sections_machine_name = 'site_sections';
  $service_hub_machine_name = 'service_hub';
  $vocabularies = taxonomy_vocabulary_get_names();

  if (array_key_exists($site_sections_machine_name, $vocabularies) && array_key_exists($service_hub_machine_name, $vocabularies)) {
    $site_section_vocabulary = $vocabularies[$site_sections_machine_name];
    $service_hub_vocabulary = $vocabularies[$service_hub_machine_name];
    db_update('taxonomy_term_data')
      ->fields(array('vid' => $service_hub_vocabulary->vid))
      ->condition('vid', $site_section_vocabulary->vid)
      ->execute();

    taxonomy_vocabulary_delete($site_section_vocabulary->vid);
  }
}

/**
 * Implements hook_update_N().
 *
 * Switch on Media module.
 */
function rbkc_deploy_update_7015() {
  module_enable(array('media'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on Media WYSIWYG, Media WYSIWYG View Mode module extensions.
 */
function rbkc_deploy_update_7016() {
  module_enable(array('media_wysiwyg', 'media_wysiwyg_view_mode'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on WYSIWYG module.
 */
function rbkc_deploy_update_7017() {
  module_enable(array('wysiwyg'), TRUE);
}


/**
 * Implements hook_update_N().
 *
 * Switch on the field group module.
 */
function rbkc_deploy_update_7018() {
  module_enable(array('field_group'), TRUE);
}


/**
 * Implements hook_update_N().
 *
 * Switch on the linkit module.
 */
function rbkc_deploy_update_7019() {
  module_enable(array('linkit'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on Short Title module.
 */
function rbkc_deploy_update_7020() {
  module_enable(array('short_title'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the entity, entity reference, contact_department and
 * feature_contact_departments modules.
 */
function rbkc_deploy_update_7021() {
  module_enable(array('entity', 'entityreference', 'contact_department', 'feature_contact_departments'), TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Remove field_contact_button.
 */
function rbkc_deploy_update_7022() {
  $instance = field_info_instance('node', 'field_contact_button', 'answer');
  field_delete_instance($instance, TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Switch on Workbench Email module.
 */
function rbkc_deploy_update_7023() {
  module_enable(array('workbench_email'), TRUE);
}

/**
 * Implements_hook_update_N().
 * 
 * Switch on Google Search Appliance module.
 */
function rbkc_deploy_update_7024() {
  module_enable(array('google_appliance'), TRUE);
}
