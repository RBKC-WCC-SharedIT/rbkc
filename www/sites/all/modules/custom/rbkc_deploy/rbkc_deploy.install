<?php

/**
 * @file
 * Install, update and uninstall functions for the site.
 */
function rbkc_deploy_install() {
  // Drop down service menu.
  $menu_machine_name = 'drop-down-service-menu';

  $menu = array(
    'menu_name' => $menu_machine_name,
    'title' => st('Drop down service menu'),
    'description' => 'The drop down service menu.',
  );
  menu_save($menu);

  // @todo: Update link path.
  $links = array(
    'Parking, transport and streets',
    'Bins and recycling',
    'Planning',
    'Libraries',
    'Council tax',
    'Births, deaths and marriages',
    'Children and education',
    'Leisure and culture',
    'Parks and ecology',
    'Housing',
    'Jobs',
    'Health and social care',
    'Licensing',
    'Business and enterprise',
    'Environment',
    'Advice and benefits',
    'Community and local life',
    'Newsroom',
  );

  foreach ($links as $link) {
    $item = array(
      'link_title' => st($link),
      'link_path' => '<front>',
      'menu_name' => $menu_machine_name,
    );
    menu_link_save($item);
  }

  // Update the menu router information.
  menu_rebuild();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Service Hub Feature.
 */
function rbkc_deploy_update_7000() {
  module_enable(array('feature_service_hub'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the metatags module.
 */
function rbkc_deploy_update_7001() {
  module_enable(array('metatag'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the node_reference module.
 */
function rbkc_deploy_update_7002() {
  module_enable(array('node_reference'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Create the footer menu and place it in the footerlinks region.
 */
function rbkc_deploy_update_7003() {
  $menu_machine_name = 'menu-footer-links';

  $footer_menu = array(
    'menu_name' => $menu_machine_name,
    'title' => st('Footer links'),
    'description' => 'Footer links.',
  );
  menu_save($footer_menu);

  $links = array(
    'Cookies and your privacy',
    'Contact us',
    'Terms of use',
  );

  // It proved necessary to set a weight to control the order of the menu links.
  $weight = 50;
  foreach ($links as $link) {
    $item = array(
      'link_title' => st($link),
      'link_path' => '<front>',
      'menu_name' => $menu_machine_name,
      'weight' => $weight,
    );
    $weight++;
    menu_link_save($item);
  }

  // Update the menu router information.
  menu_rebuild();

  // Put the menu in the footerlinks block.
  $default_theme = variable_get('theme_default', '');

  if (!$default_theme) {
    return;
  }

  $blocks = array(
    array(
      'module' => 'menu',
      'delta' => $menu_machine_name,
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'footerlinks',
      'pages' => '',
      'cache' => -1,
    ),
  );

  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the topics feature.
 */
function rbkc_deploy_update_7004() {
  module_enable(array('feature_topics'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the workbench_scheduler module.
 */
function rbkc_deploy_update_7005() {
  module_enable(array('workbench_scheduler'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Publication Feature.
 */
function rbkc_deploy_update_7006() {
  module_enable(array('feature_publication', 'feature_common'), TRUE);

  // feature_publication has a dependency on the core book module which when
  // installed creates a book content type, let's delete it.
  node_type_delete('book');

  features_revert();
}

/**
 * Implements hook_update_N().
 *
 * Switch on the RBKC view modes module.
 */
function rbkc_deploy_update_7007() {
  module_enable(array('rbkc_view_modes'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Guide Feature.
 */
function rbkc_deploy_update_7008() {
  module_enable(array('feature_guide'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Change the behaviour of the book menu so that it doesn't show all the books
 * on all the pages.
 */
function rbkc_deploy_update_7009() {
  // In 'all pages' mode, the book module generates a nested menu where the
  // parent page exists in a menu and the child pages are nested menus,
  // changing the mode to 'book pages' causes book module to generate a menu of
  // just the child links.
  variable_set('book_block_mode', 'book pages');
}

/**
 * Implements hook_update_N().
 *
 * Switch on the Sub-Hub feature.
 */
function rbkc_deploy_update_7010() {
  module_enable(array('feature_service_sub_hub'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Remove the site_section field.
 */
function rbkc_deploy_update_7011() {
  $instance = field_info_instance('node', 'field_site_section', 'answer');
  field_delete_instance($instance, TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Rename site_sections vocabulary to service_hub.
 *
 * Retrospectively added the check and skip if the service hub vocabulary
 * already exists to prevent integrity constraint violations.
 *
 * @see rbkc_deploy_update_7014().
 */
function rbkc_deploy_update_7012() {
  $service_hub_machine_name = 'service_hub';
  $vocabularies = taxonomy_vocabulary_get_names();

  if (array_key_exists($service_hub_machine_name, $vocabularies)) {
    return t('Skipping ' . __FUNCTION__ . ' as it does not need to be run.');
  }

  db_update('taxonomy_vocabulary')
    ->fields(array('name' => t('Service Hub'), 'machine_name' => 'service_hub', 'description' => 'Service Hub.'))
    ->condition('machine_name', 'site_sections')
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Remove date fields from Answer content type.
 */
function rbkc_deploy_update_7013() {
  // Remove the date fields from Answer content type.
  $field_names = array(
    'field_publish_date',
    'field_expiry_date',
  );

  foreach ($field_names as $field_name) {
    $instance = field_info_instance('node', $field_name, 'answer');
    field_delete_instance($instance, TRUE);
  }
}

/**
 * Implements hook_update_N().
 *
 * In some cases, at this point, there will two vocabularies, site sections AND
 * service hub with the terms still against the site section vocabulary. This
 * hook_update_N() checks for that scenario and sorts it out by moving the
 * terms to the service hub vocabulary and deleting the site sections vocabulary.
 */
function rbkc_deploy_update_7014() {
  $site_sections_machine_name = 'site_sections';
  $service_hub_machine_name = 'service_hub';
  $vocabularies = taxonomy_vocabulary_get_names();

  if (array_key_exists($site_sections_machine_name, $vocabularies) && array_key_exists($service_hub_machine_name, $vocabularies)) {
    $site_section_vocabulary = $vocabularies[$site_sections_machine_name];
    $service_hub_vocabulary = $vocabularies[$service_hub_machine_name];
    db_update('taxonomy_term_data')
      ->fields(array('vid' => $service_hub_vocabulary->vid))
      ->condition('vid', $site_section_vocabulary->vid)
      ->execute();

    taxonomy_vocabulary_delete($site_section_vocabulary->vid);
  }
}

/**
 * Implements hook_update_N().
 *
 * Switch on Media module.
 */
function rbkc_deploy_update_7015() {
  module_enable(array('media'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on Media WYSIWYG, Media WYSIWYG View Mode module extensions.
 */
function rbkc_deploy_update_7016() {
  module_enable(array('media_wysiwyg', 'media_wysiwyg_view_mode'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on WYSIWYG module.
 */
function rbkc_deploy_update_7017() {
  module_enable(array('wysiwyg'), TRUE);
}


/**
 * Implements hook_update_N().
 *
 * Switch on the field group module.
 */
function rbkc_deploy_update_7018() {
  module_enable(array('field_group'), TRUE);
}


/**
 * Implements hook_update_N().
 *
 * Switch on the linkit module.
 */
function rbkc_deploy_update_7019() {
  module_enable(array('linkit'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on Short Title module.
 */
function rbkc_deploy_update_7020() {
  module_enable(array('short_title'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the entity, entity reference, contact_department and
 * feature_contact_departments modules.
 */
function rbkc_deploy_update_7021() {
  module_enable(array('entity', 'entityreference', 'contact_department', 'feature_contact_departments'), TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Remove field_contact_button.
 */
function rbkc_deploy_update_7022() {
  $instance = field_info_instance('node', 'field_contact_button', 'answer');
  field_delete_instance($instance, TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Switch on Workbench Email module.
 */
function rbkc_deploy_update_7023() {
  module_enable(array('workbench_email'), TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Switch on Google Search Appliance module.
 */
function rbkc_deploy_update_7024() {
  module_enable(array('google_appliance'), TRUE);
}

/**
 * Implements_hook_update_N().
 *
 * Switch on Deep Link module and set some config.
 */
function rbkc_deploy_update_7025() {
  module_enable(array('deeplink'), TRUE);
  variable_set(DEEPLINK_CONTENT_TYPES, array(
    'answer' => 'answer',
    'guide' => 'guide',
    'publication' => 'publication',
    'servicehub' => 'servicehub',
    'subhub' => 'subhub',
    'topic' => 'topic'
  ));
  variable_set(DEEPLINK_ALLOWED_CONTROLS, array(
    'byemail' => 'byemail',
    'byuser' => 0,
  ));
  variable_set(DEEPLINK_USER_ROLES, array(
    '1' => '1',
    '3' => '3',
    '2' => 0,
  ));
  variable_set(DEEPLINK_DEFAULT_EMAIL_BODY, "Hi,\n\nView [deeplink:link-absolute] at [deeplink:url-absolute] which expires on [deeplink:expires-medium].\n\nFrom Royal Borough of Kensington and Chelsea\n\n");
}

/**
 * Implements hook_update_N().
 *
 * Switch on the book module overrides in the rbkc_book module.
 */
function rbkc_deploy_update_7026() {
  module_enable(array('rbkc_book'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on fe_block in features-extra.
 */
function rbkc_deploy_update_7027() {
  module_enable(array('fe_block'), TRUE);
}

/*
 * Switch on the rbkc_feeds module and create the feed node for the press
 * releases feed.
 */
function rbkc_deploy_update_7028() {
  module_enable(array('feature_feed', 'feature_press_release'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the rbkc_feeds module.
 */
function rbkc_deploy_update_7029() {
  module_enable(array('rbkc_feeds'), TRUE);
}

/**
 * Implements hook_update_N().
 */
function rbkc_deploy_update_7030() {
  $feed_url = 'http://RBKC:r8KCpub@rss.vuelio.uk.com/V2/RBKC/release';

  $node = new stdClass();
  node_object_prepare($node);
  $node->uid = 1;
  $node->language = LANGUAGE_NONE;
  $node->status = 0;
  $node->promote = 0;
  $node->type = 'feed';
  $node->title = 'Press release feed';
  node_save($node);

  $config = array();
  $config['RBKCPressReleaseFeedsFetcher']['source'] = $feed_url;
  $query = db_insert('feeds_source')
    ->fields(array('id', 'feed_nid', 'config', 'source', 'state', 'fetcher_result', 'imported'))
    ->values(array(
      'id' => $node->type,
      'feed_nid' => $node->nid,
      'config' => serialize($config),
      'source' => $feed_url,
      'state' => 'b:0;',
      'fetcher_result' =>'b:0;',
      'imported' => 0,
    ));

  $query->execute();

  $source = feeds_source('feed', $node->nid);
  $source->schedule();
  feeds_importer('feed')->schedule();
}

/**
 * Switch on the Display Suite module and set some default config.
 */
function rbkc_deploy_update_7031() {
  module_enable(array('ds', 'ds_extras'), TRUE);
  variable_set('ds_extras_field_template', TRUE);
}

/**
 * Switch on the rbkc_moderation module includes new moderation view, roles and permissions.
 */
function rbkc_deploy_update_7032() {
  module_enable(array('feature_rbkc_moderation'), TRUE);
}

/**
 * Switch on library
 */
function rbkc_deploy_update_7033() {
  module_enable(array('libraries'), TRUE);
}

/**
 * Switch on TCPDF
 */
function rbkc_deploy_update_7034() {
  module_enable(array('tcpdf'), TRUE);
}

/**
 * Switch on TCPDF
 */
function rbkc_deploy_update_7035() {
  module_enable(array('tcpdf'), TRUE);
}

/**
 * Switch on PDF version
 */
function rbkc_deploy_update_7036() {
  module_enable(array('print_pdf'), TRUE);
}

/**
 * Switch on Printer-friendly pages
 */
function rbkc_deploy_update_7037() {
  module_enable(array('print'), TRUE);
}

/**
 * Switch on Printer-friendly pages UI
 */
function rbkc_deploy_update_7038() {
  module_enable(array('print_ui'), TRUE);
}

/**
 * Switch on TCPDF library handler
 */
function rbkc_deploy_update_7039() {
  module_enable(array('print_pdf_tcpdf'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the dblog module
 */
function rbkc_deploy_update_7040() {
  module_enable(array('dblog'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the diff module to allow seeing changes between revisions
 */
function rbkc_deploy_update_7041() {
  module_enable(array('diff'), TRUE);
}

/**
 * Implements hook_update_N().
 *
 * Switch on the diff module to allow seeing changes between revisions
 *
 * Repeated as the diff module files were not present previously.
 */
function rbkc_deploy_update_7042() {
  module_enable(array('diff'), TRUE);
}

/**
 * Switch on the Webform feature.
 */
function rbkc_deploy_update_7044() {
  /* Obsolete due to creation of survey content type based on Webform module
  module_enable(array('feature_webform'), TRUE);
  */
}

/** Switch on the rbkc_search module.
 * Put the GSA search block in the search region.
 */
function rbkc_deploy_update_7045() {
  module_enable(array('rbkc_search'), TRUE);

  $query = db_merge('block')
    ->key(array('module' => 'google_appliance', 'delta' => 'ga_block_search_form', 'theme' => 'rbkc'))
    ->fields(array(
      'status' => 1,
      'region' => 'search',
      'pages' => '',
    ))
    ->execute();
}

/**
 * Remove legacy node reference fields before moving to entity reference
 */
function rbkc_deploy_update_7046() {
  // Delete troublesome fields
  $instance = field_info_instance('field_collection_item', 'field_internal_page_link', 'field_popular_topics');
  field_delete_instance($instance, TRUE);
  $instance = field_info_instance('field_collection_item', 'field_internal_topic_link', 'field_topic_link');
  field_delete_instance($instance, TRUE);
  $instance = field_info_instance('node', 'field_subhub_link_to_topic', 'subhub');
  field_delete_instance($instance, TRUE);

  // Revert features containing effected entityreference fields
  features_revert_module('feature_field_bases');
  features_revert_module('feature_service_sub_hub');
  features_revert_module('feature_topics');
  features_revert_module('feature_service_hub');
}

/**
 * Switch on the rbkc_moderation module includes new moderation view, roles and permissions.
 */
function rbkc_deploy_update_7047() {
  module_enable(array('feature_rbkc_moderation'), TRUE);
}

/**
 * Switch on the Webform module.
 */
function rbkc_deploy_update_7048() {
  module_enable(array('webform'), TRUE);
}

/**
 * Switch on the Survey feature.
 */
function rbkc_deploy_update_7049() {
  module_enable(array('feature_survey'), TRUE);
}

/**
 * Switch on the Smart Trim feature.
 */
function rbkc_deploy_update_7050() {
  module_enable(array('smart_trim'), TRUE);
}

/**
 * Switch on the Admin UI module.
 */
function rbkc_deploy_update_7051() {
  module_enable(array('admin_ui'), TRUE);
}

/**
 * Switch on feature_images and dependencies. Switch off the media modules.
 */
function rbkc_deploy_update_7052() {
  module_enable(array('feature_images'), TRUE);
  module_disable(array('file_entity', 'media', 'media_wysiwyg', 'media_wysiwyg_view_mode'));
}

/**
 * Switch on scald_file module.
 */
function rbkc_deploy_update_7053() {
  module_enable(array('scald_file'), TRUE);
}

/**
 * Add deeplink to survey content type.
 */
function rbkc_deploy_update_7054() {
  variable_set(DEEPLINK_CONTENT_TYPES, array(
    'answer' => 'answer',
    'guide' => 'guide',
    'publication' => 'publication',
    'servicehub' => 'servicehub',
    'subhub' => 'subhub',
    'topic' => 'topic',
    'survey' => 'survey',
  ));
}

/**
 * Switch on the entity token module.
 */
function rbkc_deploy_update_7055() {
  module_enable(array('entity_token'), TRUE);
}

/**
 * Switch on simple hierarchical select module.
 */
function rbkc_deploy_update_7056() {
  module_enable(array('shs'), TRUE);
}

/**
 * Create topic, tag, action and user vocabularies.
 */
function rbkc_deploy_update_7057() {
  $vocabulary_machine_names = array(
    'topic',
    'tag',
    'action',
    'user'
  );

  $vocabularies = taxonomy_vocabulary_get_names();

  foreach ($vocabulary_machine_names as $vocabulary_machine_name) {
    if (array_key_exists($vocabulary_machine_name, $vocabularies)) {
      continue;
    }

    db_insert('taxonomy_vocabulary')
      ->fields(array('name' => t(ucfirst($vocabulary_machine_name)), 'machine_name' => $vocabulary_machine_name, 'description' => ucfirst($vocabulary_machine_name) . '.'))
      ->execute();
  }
}

/**
 * Switch on summary settings module.
 */
function rbkc_deploy_update_7058() {
  module_enable(array('summary_settings'), TRUE);
}

/**
 * Switch on spelling suggestions (GSA).
 */
function rbkc_deploy_update_7059() {
  variable_set('google_appliance_spelling_suggestions', '1');
}

/**
 * Switch on feature_roles_permissions.
 */
function rbkc_deploy_update_7060() {
  module_enable(array('feature_roles_permissions'), TRUE);
}

/**
 * Switch on the ShareThis module.
 */
function rbkc_deploy_update_7061() {
  module_enable(array('ShareThis'), TRUE);
}

/**
 * Switch on the ShareThis feature.
 */
function rbkc_deploy_update_7062() {
  module_enable(array('feature_sharethis'), TRUE);
}

/**
 * Enable and configure scald_maps .
 */
function rbkc_deploy_update_7063() {
  module_enable(array('scald_map'), TRUE);
  features_revert_module('feature_common');
}

/**
 * Switch on the accessibility checking modules.
 */
function rbkc_deploy_update_7064() {
  module_enable(array('accessibility', 'accessibility_content', 'accessibility_wysiwyg'), TRUE);
}

/**
 * Switch on the aggregator module.
 */
function rbkc_deploy_update_7065() {
  module_enable(array('aggregator'), TRUE);
}

/**
 * Switch on the RBKC related content module.
 */
function rbkc_deploy_update_7066() {
  module_enable(array('rbkc_related_content'), TRUE);
}

/**
 * Switch on the Views Arguments Extras module.
 */
function rbkc_deploy_update_7067() {
  module_enable(array('views_arguments_extras'), TRUE);
}

/**
 * Switch on the add to head module.
 */
function rbkc_deploy_update_7068() {
  module_enable(array('add_to_head'), TRUE);
}

/**
 * Put the GSA ga_related_searches block in the content region.
 */
function rbkc_deploy_update_7069() {
  $delta = 'ga_related_searches';
  $region = 'rbkc';

  $query = db_merge('block')
    ->key(array('module' => 'google_appliance', 'delta' => $delta, 'theme' => $region))
    ->fields(array(
      'status' => 1,
      'region' => 'content',
      'pages' => '',
    ))
    ->execute();

  db_update('block')
    ->fields(array('weight' => -5))
    ->condition('module', 'google_appliance')
    ->condition('delta', $delta)
    ->condition('theme', $region)
    ->execute();
}

/**
 * Set the visibility of the ga_related_searches block.
 */
function rbkc_deploy_update_7070() {
  $delta = 'ga_related_searches';
  $region = 'rbkc';

  db_update('block')
    ->fields(array('visibility' => 1, 'pages' => 'gsearch/*'))
    ->condition('module', 'google_appliance')
    ->condition('delta', $delta)
    ->condition('theme', $region)
    ->execute();
}

/**
 * Switch on the feature_views feature.
 */
function rbkc_deploy_update_7071() {
  module_enable(array('feature_views'), TRUE);
}
